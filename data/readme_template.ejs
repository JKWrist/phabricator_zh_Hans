<%
function escapeMarkdown(text) {
  return (text + '').replace(/[>_]/g, "\\$&")
}
function escapeRegExp(text) {
  return (text + '').replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&")
}
function escapeUnicode(text) {
  return text.replace(/\u4e00|\u9fa5/g, function(escape) {
    return '\\u' + escape.charCodeAt().toString(16)
  })
}
function escape(text) {
  return escapeRegExp(escapeUnicode(escapeMarkdown(text))).replace(/\n/g, '\\n')
}
%># Phabricator 简体中文翻译和工具

当前整体翻译进度百分比：<%- totalPercent %>。

当前短句翻译进度百分比：<%- totalPercentOfShortItems %>。注：短句为长度小于 66 个字符的句子。

分类 | 整体翻译百分比 | 整体翻译进度条 | 短句翻译百分比 | 短句翻译进度条
--- | -------- | -------- | ------------ | -----------
<% for (let category in categories) { %><%- escapeMarkdown(category) + (categories[category].isPrototype ? ' `原型`' : '') %> | <%- categories[category].percent %> | <%- categories[category].percentBar %> | <%- categories[category].percentOfShortItems %> | <%- categories[category].percentOfShortItemsBar %>
<% } %>
## 启动翻译工具

在当前项目目录，执行如下命令：

```sh
$ npm start
```

然后启动浏览器（建议 Chrome 或者 Safari），打开网址 http://localhost:3000 来启动翻译工具。

## 编译 PHP 翻译文件和最新的 README.md 文件

在当前项目目录，执行如下命令：

```sh
$ bin/compile
```

然后你将得到四份文件：

1. Phabricator 简体中文翻译文件：`dist/PhabricatorSimplifiedChineseTranslation.php`；
2. 翻译数据文件：`data/translations.json`；
3. 包含最新摘要信息的 README 文件：`README.md`。

## 本地化 Phabricator

将 `dist/PhabricatorSimplifiedChineseTranslation.php` 文件拷贝到 Phabricator 项目的 `phabricator/src/extensions` 目录中即可。

然后调整个人设置，进入 `Personal Settings` 的 `Account`，在 `Translation` 选项中选择 `Chinese (Simplified)`，保存后界面即切换为简体中文。

## 翻译规则

总共有三种规则：

1. 参数规则：检查翻译前后 `%s` 和 `%d` 参数的数量是否匹配；
2. 术语表规则：检查翻译内容是否符合术语表；
3. 正则表达式规则：用正则表达式检查翻译内容是否符合规则。

**正则表达式规则列表**

词 | 翻译
---- | -----------
<% for (let key in rules) { %><%- escape(key) %> | <%- escape(rules[key]) %>
<% } %>
## 术语表

词 | 翻译
---- | -----------
<% for (let key in terminology) { %><%- key %> | <%- terminology[key] %>
<% } %>
## 释放国际化资源

首先拉取最新的 Phabricator 源码。在 **Phabricator** 项目路径，执行如下命令：

```sh
$ bin/i18n extract
```

然后你将在 Phabricator 项目的 `/src/.cache/` 目录中找到 `i18n_files.json` 文件。
拷贝 `i18n_files.json` 文件到本项目的 `data/` 目录。

## 附带的工具

 `sortjson` 是一个用来排序 JSON 文件内容的附带工具。

 在当前项目目录，执行如下命令：

 ```sh
 $ bin/sortjson
 ```

**帮助**

```sh
$ bin/sortjson file selector

排序所有属性。举例：bin/sortjson ./data/example.json
只排序根节点下的属性。举例：bin/sortjson ./data/example.json .
只排序给定节点下的属性。举例：bin/sortjson ./data/example.json words.
排序给定节点下的所有子节点属性。举例：bin/sortjson ./data/example.json words
```

## 附录

[Phabricator 官方国际化文档](https://secure.phabricator.com/book/phabcontrib/article/internationalization/)