#!/usr/bin/env node
"use strict";

const fs = require('fs')
const jsonfile = require('jsonfile')
const sortKeys = require('../lib/sortkeys')

if (process.argv.length < 3 || process.argv.length > 4) {
  console.log('Missing arguments!\n')
  console.log('HELP')
  console.log("$ command file selector")
  console.log("Sort all properties.Example: command ./data/example.json")
  console.log("Sort only properties under root node.Example: command ./data/example.json .")
  console.log("Sort only properties under given node.Example: command ./data/example.json words.")
  console.log("Sort all descendent properties under given node.Example: command ./data/example.json words")

  process.exit(1)
}

const file = process.argv[2]

// Check file argument.
if (!fileExists(file)) {
  console.log(`File '${file}' does not exists.`)

  process.exit(1)
}

let selector
let isRecursive

// Get selector and isRecursive arguments.
if (process.argv.length === 4) {
  const argv3 = process.argv[3]
  const selectorLength = argv3.length

  if (argv3 === '.') {
    console.log('Sort root property only.')

    selector = ''
    isRecursive = false
  } else if (argv3[selectorLength - 1] === '.') {
    console.log('Sort selected property only.')

    selector = argv3.substr(0, selectorLength - 1)
    isRecursive = false
  } else {
    console.log('Sort descendant of selected property.')

    selector = argv3.substr(0, selectorLength)
    isRecursive = true
  }
} else {
  console.log('Sort all properties.')

  selector = ''
  isRecursive = true
}

const jsonObj = jsonfile.readFileSync(file)
let newObj = jsonObj

if (selector) {
  if (jsonObj[selector] && typeof jsonObj[selector] === 'object') {
    if (isRecursive) {
      newObj[selector] = recursiveSort(jsonObj[selector])
    } else {
      newObj[selector] = sort(jsonObj[selector])
    }
  } else {
    console.log(`JSON selector argument '${selector}' is invalid!`)
    process.exit(1)
  }
} else {
    if (isRecursive) {
      newObj = recursiveSort(jsonObj)
    } else {
      newObj = sort(jsonObj)
    }
}

jsonfile.spaces = 2
jsonfile.writeFileSync(file, newObj)

console.log('Done!')

function fileExists(path) {
  try {
    fs.accessSync(path, fs.constants.F_OK)

    return true
  } catch(e) {
    return false
  }
}

function sort(obj) {
  if (Array.isArray(obj)) {
    return obj.sort()
  }

  return sortKeys(obj)
}

function recursiveSort(obj) {
  if (typeof obj !== 'object') {
    return obj
  }

  obj = sort(obj)

  Object.keys(obj).forEach(key => obj[key] = recursiveSort(obj[key]))

  return obj
}