#!/usr/bin/env node

const child_process = require('child_process')
const crypto = require('crypto')
const fs = require('fs')
const path = require('path')
const ejs = require('ejs')
const phplint = require('phplint').lint
const rules = require('../lib/rules')
const sortKeys = require('../lib/sortkeys')
const dataHelper = require('../lib/datahelper')

const LENGTH_OF_SHORT_ITEMS = 66

// Load data.
const obsoletedData = dataHelper.readFile('discover_obsoleted')
const translationsData = dataHelper.readFile('translations')
const phabricatori18nFilesData = dataHelper.readFile('phabricator_i18n_files')
// const libphutili18nFilesData = dataHelper.readFile('libphutil_i18n_files')
const prototypeApplicationsData = dataHelper.readFile('prototype_applications')

console.log('-'.repeat(30))

const gitInfo = {
  phabricator: getGitInfo(
    '../phabricator',
    'https://secure.phabricator.com/source/phabricator.git'
  ),
  libphutil: getGitInfo(
    '../libphutil',
    'https://secure.phabricator.com/source/libphutil.git'
  )
}

// Check rules.
const passed = rules.check(translationsData, error => {
  console.log('Error: ' + error.type)
  console.log('Rule: ' + error.rule)
  console.log('Translation: ' + error.translation)
  console.log('-'.repeat(30))
})

if (!passed) {
  console.log('-'.repeat(30))
  console.log('Rules not passed.')

  process.exit(1)
} else {
  console.log('-'.repeat(30))
  console.log('Rules passed.')
}

// Write sorted translations data to file.
dataHelper.writeFile('translations', translationsData, true)

// Write all template files.
writeTemplateFile(
  'README.md',
  computeTranslationSummary(translationsData, gitInfo)
)
writeTemplateFile('Rules.md', {
  rules: dataHelper.readFile('rules')
})
writeTemplateFile('Terminology.md', {
  terminology: dataHelper.readFile('terminology')
})

if (
  !/\(stable\) Promote 20\d{2} Week \d{1,2}/.test(gitInfo.phabricator.subject)
) {
  console.log('Current git branch is not on a stable version, ignored.')

  process.exit(0)
}

createVersionDirectory(gitInfo.phabricator.subject)

const translationPHPFilePath = `dist/${gitInfo.phabricator.subject}/PhabricatorSimplifiedChineseTranslation.php`

writeTemplateFile(translationPHPFilePath, {
  translations: translationsData
})

// Run PHP Lint.
phplint([translationPHPFilePath], err => {
  if (err) {
    console.log(err.toString())
  } else {
    console.log('-'.repeat(30))
    console.log('Lint passed.')
  }
})

function computeTranslationSummary(translationsData, gitInfo) {
  function buildCategory(
    previousCategory,
    categoryTranslationCount,
    categoryTotalCount,
    categoryTranslationCountOfShortItems,
    categoryTotalCountOfShortItems
  ) {
    return {
      percent: computePercent(categoryTranslationCount, categoryTotalCount),
      percentBar: computeBar(categoryTranslationCount, categoryTotalCount),
      percentOfShortItems: computePercent(
        categoryTranslationCountOfShortItems,
        categoryTotalCountOfShortItems
      ),
      percentOfShortItemsBar: computeBar(
        categoryTranslationCountOfShortItems,
        categoryTotalCountOfShortItems
      ),
      isPrototype: isPrototype(previousCategory),
      strings: {}
    }
  }

  function isPrototype(category) {
    return (
      prototypeApplicationsData.indexOf(
        category.replace('applications/', '')
      ) !== -1
    )
  }

  const currentVersionTranslationData = getCurrentVersionTranslationData(
    translationsData,
    obsoletedData
  )

  const items = {}
  let categories = {}
  let totalCount = 0
  let totalCountWithoutPrototype = 0
  let totalCountOfShortItems = 0
  let totalTranslationCount = 0
  let totalTranslationCountOfShortItems = 0
  let totalTranslationCountWithoutPrototype = 0
  let categoryTotalCount = 0
  let categoryTotalCountOfShortItems = 0
  let categoryTranslationCount = 0
  let categoryTranslationCountOfShortItems = 0
  let previousCategory = null

  for (let file in phabricatori18nFilesData.files) {
    if (!dataHelper.INCLUDE_TEST_CASE && file.endsWith('TestCase.php')) continue

    const pathFragments = file.split('/')

    // Group category by applications.
    const category =
      pathFragments[0] === 'applications'
        ? pathFragments[0] + '/' + pathFragments[1]
        : pathFragments[0]

    // Init empty category.
    if (categories[category] === undefined) {
      categories[category] = null

      // Buld a previous category.
      if (previousCategory !== null) {
        categories[previousCategory] = buildCategory(
          previousCategory,
          categoryTranslationCount,
          categoryTotalCount,
          categoryTranslationCountOfShortItems,
          categoryTotalCountOfShortItems
        )
      }

      // Reset count.
      categoryTotalCount = 0
      categoryTotalCountOfShortItems = 0
      categoryTranslationCount = 0
      categoryTranslationCountOfShortItems = 0
    }

    // Get strings by file id.
    const fileId = phabricatori18nFilesData.files[file]
    const strings = phabricatori18nFilesData.strings[fileId] || []

    // Set strings to cateogries.
    strings.forEach(item => {
      // For exception.
      if (categories[category] === null) {
        categories[category] = {
          strings: {}
        }
      }

      if (categories[category].strings[item.string] === undefined) {
        categories[category].strings[item.string] = ''

        categoryTotalCount++

        if (item.string.length <= LENGTH_OF_SHORT_ITEMS) {
          categoryTotalCountOfShortItems++
        }

        const translation = currentVersionTranslationData[item.string]

        if (translation !== undefined) {
          categoryTranslationCount++

          if (item.string.length <= LENGTH_OF_SHORT_ITEMS) {
            categoryTranslationCountOfShortItems++
          }

          if (!isPrototype(category)) {
            totalTranslationCountWithoutPrototype++
          }
        }
      }

      if (items[item.string] === undefined) {
        totalCount++

        if (!isPrototype(category)) {
          totalCountWithoutPrototype++
        }

        if (item.string.length <= LENGTH_OF_SHORT_ITEMS) {
          totalCountOfShortItems++
        }

        items[item.string] = item.string
      }
    })

    previousCategory = category
  }

  categories[previousCategory] = buildCategory(
    previousCategory,
    categoryTranslationCount,
    categoryTotalCount,
    categoryTranslationCountOfShortItems,
    categoryTotalCountOfShortItems
  )

  categories = sortKeys(categories)

  for (let key in currentVersionTranslationData) {
    totalTranslationCount++

    if (key.length <= LENGTH_OF_SHORT_ITEMS) {
      totalTranslationCountOfShortItems++
    }
  }

  const data = {
    phabricatori18nFileHash: computeFileHash(
      dataHelper.getPath('phabricator_i18n_files')
    ),
    libphutili18nFileHash: computeFileHash(
      dataHelper.getPath('libphutil_i18n_files')
    ),
    totalCount: totalCount,
    totalCountWithoutPrototype: totalCountWithoutPrototype,
    totalPercent: computePercent(totalTranslationCount, totalCount),
    totalPercentOfShortItems: computePercent(
      totalTranslationCountOfShortItems,
      totalCountOfShortItems
    ),
    totalPercentWithoutPrototype: computePercent(
      totalTranslationCountWithoutPrototype,
      totalCountWithoutPrototype
    ),
    categories: categories,
    gitInfo: gitInfo
  }

  return data
}

function writeTemplateFile(filePath, data) {
  const ejsContext = {
    escapeMarkdown(text) {
      return (text + '').replace(/[>_]/g, '\\$&')
    },
    escapeRegExp(text) {
      return (text + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&')
    },
    escapeUnicode(text) {
      return (text + '').replace(/\u4e00|\u9fa5/g, replacement => {
        return '\\u' + replacement.charCodeAt(0).toString(16)
      })
    },
    escapeRule(text) {
      return this.escapeMarkdown(
        this.escapeUnicode(this.escapeRegExp(text + ''))
      ).replace(/\n/g, '\\n')
    },
    phpString(text) {
      return (text + '').replace(/'/g, "\\'")
    }
  }

  const templatePath = path.join('templates', path.basename(filePath) + '.ejs')

  // Load template file.
  const template = fs.readFileSync(templatePath).toString()

  // Render template with data.
  const fileContent = ejs.render(template, data, {
    context: ejsContext
  })

  fs.writeFileSync(filePath, fileContent)
}

function getCurrentVersionTranslationData(translationsData, obsoletedData) {
  const results = {}

  for (let key in translationsData) {
    if (!obsoletedData[key]) {
      results[key] = translationsData[key]
    }
  }

  return results
}

// Compute percent string.
function computePercent(dividend, divisor) {
  const percent = (dividend / divisor) * 100

  if (percent === 100) {
    // Emphasize "100%" in markdown (**text**).
    return '**100%**'
  } else if (percent > 99) {
    return '99%'
  } else if (Number.isNaN(percent)) {
    // Not available.
    return '---'
  }

  return percent.toPrecision(2) + '%'
}

// Compute percent bar string.
function computeBar(dividend, divisor) {
  const percent = (dividend / divisor) * 100

  if (percent === 100) {
    // Use different style when 100%.
    // Width of 8 '✓' = Width of 10 '='
    return '✓'.repeat(8)
  } else if (Number.isNaN(percent)) {
    // Not available.
    return ''
  }

  return '='.repeat(percent / 10)
}

// Compute sha1 hash value of specific file.
function computeFileHash(path) {
  const sha1 = crypto.createHash('sha1')
  const buffer = fs.readFileSync(path)

  sha1.update(buffer)

  return sha1.digest('hex')
}

function getGitInfo(repoPath, repoURL) {
  console.log(`Switch branch of ${path.resolve(repoPath)} to stable.`)

  cloneGitRepository(repoPath, repoURL)

  const stdoutBranch = execSync('git branch --contains', repoPath)

  if (/  stable/.test(stdoutBranch) && !/^\* \(HEAD/.test(stdoutBranch)) {
    execSync(`git checkout stable`, repoPath)
  }

  const stdout = execSync('git log -1 --pretty=format:"%h %H %s"', repoPath)
  const i1 = stdout.indexOf(' ')
  const i2 = stdout.indexOf(' ', i1 + 1)

  const gitInfo = {
    abbrCommitHash: stdout.substring(0, i1),
    commitHash: stdout.substring(i1 + 1, i2),
    subject: stdout.substring(i2 + 1)
  }

  console.log(`Commit[${gitInfo.abbrCommitHash}]: ${gitInfo.subject}`)

  return gitInfo
}

function cloneGitRepository(repoPath, repoURL) {
  if (!fs.existsSync(repoPath)) {
    execSync(`git clone -b stable ${repoURL}`, path.join('..'))
  }
}

// Create version directory under "./dist".
function createVersionDirectory(dir) {
  const dirPath = path.join('./dist', dir)

  if (fs.existsSync(dirPath)) {
    return
  }

  fs.mkdirSync(dirPath)
}

function execSync(command, cwd) {
  return child_process
    .execSync(command, {
      cwd: cwd
    })
    .toString()
}
