#!/usr/bin/env node
"use strict";

const ejs = require('ejs')
const fs = require('fs')
const jsonfile = require('jsonfile')
const phplint = require('phplint').lint
const rules = require('../lib/rules')
const sortKeys = require('../lib/sortkeys')

// Initialize data file paths.
const i18nFilesPath = 'data/i18n_files.json'
const prototypeApplicationsPath = 'data/prototype_applications.json'
const rulesPath = 'data/rules.json'
const terminologyPath = 'data/terminology.json'
const translationsPath = 'data/translations.json'

// Initialize output file paths.
const readmeFilePath = 'README.md'
const rulesFilePath = 'Rules.md'
const terminologyFilePath = 'Terminology.md'
const translationsFilePath = 'dist/PhabricatorSimplifiedChineseTranslation.php'

// Load data.
const rulesData = jsonfile.readFileSync(rulesPath)
const terminologyData = jsonfile.readFileSync(terminologyPath)
let translationsData = jsonfile.readFileSync(translationsPath)

// Check rules.
const hasError = rules.check(translationsData, error => {
  console.log('Error: ' + error.type)
  console.log('Rule: ' + error.rule)
  console.log('Translation: ' + error.translation)
  console.log('-'.repeat(30))
})

if (hasError) {
  console.log('-'.repeat(30))
  console.log('Rules not passed.')

  process.exit(1)
} else {
  console.log('-'.repeat(30))
  console.log('Rules passed.')
}

// Set output JSON file indent.
jsonfile.spaces = 2

// Sort keys of translations object.
translationsData = sortKeys(translationsData)

// Write soted translations data to file.
writeFile(translationsPath, translationsData)

// Write all template files.
writeTemplateFile(readmeFilePath, computeTranslationSummary(translationsData, rulesData, terminologyData))
writeTemplateFile(rulesFilePath, { rules: rulesData })
writeTemplateFile(terminologyFilePath, { terminology: terminologyData })
writeTemplateFile(translationsFilePath, { translations: translationsData })

// Run PHP Lint.
phplint([translationsFilePath], (err) => {
  if (err) {
    console.log(err.toString())
  } else {
    console.log('-'.repeat(30))
    console.log('Lint passed.')
  }
})

function computeTranslationSummary(translations, rules, terminology) {
  function buildCategory(
    previousCategory,
    categoryTranslationCount,
    categoryTotalCount,
    categoryTranslationCountOfShortItems,
    categoryTotalCountOfShortItems
  ) {
    return {
      percent: computePercent(categoryTranslationCount, categoryTotalCount),
      percentBar: computeBar(categoryTranslationCount, categoryTotalCount),
      percentOfShortItems: computePercent(categoryTranslationCountOfShortItems, categoryTotalCountOfShortItems),
      percentOfShortItemsBar: computeBar(categoryTranslationCountOfShortItems, categoryTotalCountOfShortItems),
      isPrototype: prototypeApplicationsData.indexOf(previousCategory.replace('applications/', '')) !== -1,
      strings: {}
    }
  }

  const i18nFilesData = jsonfile.readFileSync(i18nFilesPath)
  const prototypeApplicationsData = jsonfile.readFileSync(prototypeApplicationsPath)

  const lengthOfShortItems = 66
  const categories = {}

  let totalCount = 0
  let totalCountOfShortItems = 0
  let totalTranslationCount = 0
  let totalTranslationCountOfShortItems = 0
  let categoryTotalCount = 0
  let categoryTotalCountOfShortItems = 0
  let categoryTranslationCount = 0
  let categoryTranslationCountOfShortItems = 0
  let previousCategory = null

  for (let file in i18nFilesData.files) {
    const pathFragments = file.split('/')

    // Group category by applications.
    const category = pathFragments[0] === 'applications' ?
      pathFragments[0] + '/' + pathFragments[1] :
      pathFragments[0]
    
    // Init empty category.
    if (categories[category] === undefined) {
      categories[category] = null
      
      if (previousCategory !== null) {
        categories[previousCategory] = buildCategory(
          previousCategory,
          categoryTranslationCount,
          categoryTotalCount,
          categoryTranslationCountOfShortItems,
          categoryTotalCountOfShortItems
        )
      }

      categoryTotalCount = 0
      categoryTotalCountOfShortItems = 0
      categoryTranslationCount = 0
      categoryTranslationCountOfShortItems = 0
    }

    previousCategory = category

    // Get strings by file id.
    const fileId = i18nFilesData.files[file]
    const strings = i18nFilesData.strings[fileId] || []

    // Set strings to cateogries.
    strings.forEach(item => {
      if (categories[previousCategory] === null) {
        categories[previousCategory] = {
          strings: {}
        }
      }

      if (categories[previousCategory].strings[item.string] === undefined) {
        categories[previousCategory].strings[item.string] = ''

        categoryTotalCount++
        totalCount++

        if (item.string.length <= lengthOfShortItems) {
          totalCountOfShortItems++
          categoryTotalCountOfShortItems++
        }

        const string = translations[item.string]

        if (string !== undefined) {
          categoryTranslationCount++
          totalTranslationCount++

          if (item.string.length <= lengthOfShortItems) {
            categoryTranslationCountOfShortItems++
            totalTranslationCountOfShortItems++
          }
        }
      }
    })
  }

  categories[previousCategory] = buildCategory(
    previousCategory,
    categoryTranslationCount,
    categoryTotalCount,
    categoryTranslationCountOfShortItems,
    categoryTotalCountOfShortItems
  )

  const data = {
    totalItems: totalCount,
    totalPercent: computePercent(totalTranslationCount, totalCount),
    totalPercentOfShortItems: computePercent(totalTranslationCountOfShortItems, totalCountOfShortItems),
    categories: categories
  }

  return data
}

function writeTemplateFile(filePath, data) {
  const ejsContext = {
    escapeMarkdown(text) {
      return (text + '').replace(/[>_]/g, "\\$&")
    },
    escapeRegExp(text) {
      return (text + '').replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&")
    },
    escapeUnicode(text) {
      return (text + '').replace(/\u4e00|\u9fa5/g, replacement => {
        return '\\u' + replacement.charCodeAt(0).toString(16)
      })
    },
    escapeRule(text) {
      return this.escapeMarkdown(this.escapeUnicode(this.escapeRegExp(text + ''))).replace(/\n/g, '\\n')
    },
    phpString(text) {
      return (text + '').replace(/'/g, "\\'")
    }
  }

  const templatePath = `templates/${filePath}.ejs`

  // Load template file.
  const template = fs.readFileSync(templatePath).toString()

  // Render template with data.
  const fileContent = ejs.render(template, data, { context: ejsContext })

  writeFile(filePath, fileContent)
}

function writeFile(path, content) {
  if (typeof content === 'string') {
    fs.writeFileSync(path, content)
  } else {
    jsonfile.writeFileSync(path, content)
  }

  console.log('-'.repeat(30))
  console.log(`Writing file to "${path}".`)
}

function computePercent(dividend, divisor) {
  const percent = dividend / divisor * 100

  if (percent === 100) {
    return '**100%**'
  } else if (Number.isNaN(percent)) {
    return '---'
  }

  return percent.toPrecision(2) + '%'
}

function computeBar(dividend, divisor) {
  const percent = dividend / divisor * 100

  if (percent === 100) {
    return 'âœ“'.repeat(10)
  } else if (Number.isNaN(percent)) {
    return ''
  }

  return '='.repeat(percent / 10)
}