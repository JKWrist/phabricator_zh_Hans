#!/usr/bin/env node

const jsonfile = require('jsonfile')
const wordLevenshtein = require('../lib/wordlevenshtein')
const sortKeys = require('../lib/sortkeys')

const obsoletedPath = 'data/discover/obsoleted.json'
const similarsPath = 'data/discover/similars.json'
const allPath = 'data/discover/all.json'
const libphutili18nFilesPath = 'data/libphutil/i18n_files.json'
const phabricatori18nFilesPath = 'data/phabricator/i18n_files.json'
const translationsPath = 'data/translations.json'

const DISCOVER_TEST_CASE = false

const phabricatori18nFilesData = jsonfile.readFileSync(phabricatori18nFilesPath)
const libphutili18nFilesData = jsonfile.readFileSync(libphutili18nFilesPath)
const translationsData = sortKeys(jsonfile.readFileSync(translationsPath))

const option = process.argv[2] || 'all'

// Set output JSON file indent.
jsonfile.spaces = 2
  
console.log('')

switch (option) {
  case 'all':
    console.log('Get all items.')  

    findAllItems()

    break;

  case 'similar':
    console.log('Find similar items.')  

    findSimilarItems()

    break;

  case 'obsoleted':
    console.log('Find obsoleted items.')  

    findObsoletedItems()

    break;

  default:
    console.log('Invalid option. Input one of following options:\n')
    console.log('bin/discover all')
    console.log('bin/discover similar')
    console.log('bin/discover obsoleted\n')

    break;
}

console.log('')

function findAllItems() {
  const resultStrings = getAllStrings()

  jsonfile.writeFileSync(allPath, sortKeys(resultStrings))
}

function findSimilarItems() {
  const resultStrings = getSimilarStrings()

  jsonfile.writeFileSync(similarsPath, resultStrings)
}

function findObsoletedItems() {
  const allStrings = getAllStrings()
  const resultStrings = {}

  for (let key in translationsData) {
    if (allStrings[key] === undefined) {
      resultStrings[key] = ''
    }
  }

  jsonfile.writeFileSync(obsoletedPath, resultStrings)
}

function getAllStrings() {
  const resultStrings = {}
  const func = item => resultStrings[item.string] = ''

  forEachi18nFilesData(phabricatori18nFilesData, func)
  forEachi18nFilesData(libphutili18nFilesData, func)

  delete resultStrings['']

  return resultStrings
}

function forEachi18nFilesData(i18nFilesData, func) {
  for (let file in i18nFilesData.files) {
    if (!DISCOVER_TEST_CASE && file.endsWith('TestCase.php')) continue

    const fileId = i18nFilesData.files[file]
    const strings = i18nFilesData.strings[fileId] || []

    strings.forEach(func)
  }
}

function getSimilarStrings() {
  const allStrings = getAllStrings()
  const allStringsLength = Object.keys(allStrings).length
  const resultStrings = {}

  let lastPercent = 0
  let count = 0

  for (let str0 in allStrings) {
    const length0 = (str0.match(/ /g) || []).length + 1

    if (length0 === 1) continue

    resultStrings[str0] = {}

    for (let str1 in allStrings) {
      if (str1 === str0) continue

      const length1 = (str1.match(/ /g) || []).length + 1

      if (length1 === 1 || length0 > length1) continue

      const distance = wordLevenshtein.get(str0, str1)

      if ((length1 - distance) > length0 / 2 && distance <= (length0 + 1) / 2) {
        const category = 's' + (length1 - distance)

        if (resultStrings[str0][category] === undefined) {
          resultStrings[str0][category] = []
          resultStrings[str0][category].push(str0)
        }

        resultStrings[str0][category].push(str1)
      }
    }

    count++

    const percent = Math.ceil(100 * count / allStringsLength)

    // if (percent === 2) {
    //   console.log('return')
    //   return resultStrings
    // }

    if (percent !== lastPercent) {
      console.log(percent + '%')

      lastPercent = percent
    }

    if (Object.keys(resultStrings[str0]).length === 0) {
      delete resultStrings[str0]
    }
  }  

  return resultStrings
}