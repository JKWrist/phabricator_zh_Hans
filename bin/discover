#!/usr/bin/env node

const wordLevenshtein = require('../lib/wordlevenshtein')
const dataHelper = require('../lib/datahelper')

const REMOVE_OBSOLETED_DATA = false

const obsoletedData = dataHelper.readFile('discover_obsoleted')
const phabricatori18nFilesData = dataHelper.readFile('phabricator_i18n_files')
// const libphutili18nFilesData = dataHelper.readFile('libphutil_i18n_files')
const translationsData = dataHelper.readFile('translations')

const option = process.argv[2]

console.log('')

switch (option) {
  case 'all':
    console.log('Get all items. See "data/discover/strings.json".')

    findAllItems()

    break

  case 'similar':
    console.log('Find similar items. See "data/discover/similars.json".')

    findSimilarItems()

    break

  case 'obsoleted':
    console.log('Find obsoleted items. See "data/discover/obsoleted.json".')

    findObsoletedItems()

    break

  case 'terminology':
    console.log('Find terminologies. See "data/discover/terminology.json".')

    findTerminologies()

    break

  case 'unit':
    console.log('Find unit. See "data/discover/units.json".')

    findUnitItems()

    break

  default:
    console.log('Invalid option. Input one of following options:\n')
    console.log('bin/discover all')
    console.log('bin/discover similar')
    console.log('bin/discover obsoleted')
    console.log('bin/discover terminology')
    console.log('bin/discover unit')

    break
}

console.log('')

function findAllItems() {
  const resultStrings = getAllStrings()

  dataHelper.writeFile('discover_strings', resultStrings, true)
}

function findSimilarItems() {
  const resultStrings = getSimilarStrings()

  cleanupDuplicatedSimilarStrings(resultStrings)

  dataHelper.writeFile('discover_similars', resultStrings)
}

function findObsoletedItems() {
  const allStrings = getAllStrings()

  for (let key in translationsData) {
    if (allStrings[key] === undefined) {
      obsoletedData[key] = translationsData[key]

      if (REMOVE_OBSOLETED_DATA) {
        delete translationsData[key]
      }
    }
  }

  dataHelper.writeFile('discover_obsoleted', obsoletedData)
  dataHelper.writeFile('translations', translationsData)
}

function findTerminologies() {
  const resultStrings = getTerminologies()

  dataHelper.writeFile('discover_terminology', resultStrings)
}

function findUnitItems() {
  const resultStrings = getUnitItems()

  dataHelper.writeFile('discover_units', resultStrings)
}

function getAllStrings() {
  const resultStrings = {}
  const func = item => (resultStrings[item.string] = '')

  forEachi18nFilesData(phabricatori18nFilesData, func)
  // forEachi18nFilesData(libphutili18nFilesData, func)

  delete resultStrings['']

  return resultStrings
}

function forEachi18nFilesData(i18nFilesData, func) {
  for (let file in i18nFilesData.files) {
    if (!dataHelper.INCLUDE_TEST_CASE && file.endsWith('TestCase.php')) continue

    const fileId = i18nFilesData.files[file]
    const strings = i18nFilesData.strings[fileId] || []

    strings.forEach(func)
  }
}

function getSimilarStrings() {
  const allStrings = getAllStrings()
  const allStringsLength = Object.keys(allStrings).length
  const resultStrings = {}

  let lastPercent = 0
  let count = 0

  for (let str0 in allStrings) {
    const length0 = (str0.match(/ /g) || []).length + 1

    count++

    if (length0 === 1) continue

    resultStrings[str0] = {}

    for (let str1 in allStrings) {
      if (str1 === str0) continue

      const length1 = (str1.match(/ /g) || []).length + 1

      if (length1 === 1 || length0 > length1) continue

      const distance = wordLevenshtein.get(str0, str1)

      if (length1 - distance > length0 / 2 && distance <= (length0 + 1) / 2) {
        const category = 's' + (length1 - distance)

        if (resultStrings[str0][category] === undefined) {
          resultStrings[str0][category] = []
          resultStrings[str0][category].push(str0)
        }

        resultStrings[str0][category].push(str1)
      }
    }

    const percent = Math.ceil((100 * count) / allStringsLength)

    if (percent !== lastPercent) {
      console.log(percent + '%')

      lastPercent = percent
    }

    if (Object.keys(resultStrings[str0]).length === 0) {
      delete resultStrings[str0]
    }
  }

  return resultStrings
}

function cleanupDuplicatedSimilarStrings(similars) {
  console.log('Cleaning up...')

  for (let str0 in similars) {
    for (let str1 in similars) {
      if (str0 === str1) continue

      for (let sameSize0 in similars[str0]) {
        for (let sameSize1 in similars[str1]) {
          if (
            similars[str0][sameSize0].length !==
            similars[str1][sameSize1].length
          )
            continue

          if (
            JSON.stringify(similars[str0][sameSize0].sort()) ===
            JSON.stringify(similars[str1][sameSize1].sort())
          ) {
            delete similars[str1][sameSize1]

            if (Object.keys(similars[str1]).length === 0) {
              delete similars[str1]
            }
          }
        }
      }
    }
  }
}

function getTerminologies() {
  const resultStrings = {}
  const words = {}

  for (let str in translationsData) {
    if (/^\w+$|^\w+ \w+$/.test(str)) {
      words[str] = translationsData[str]
    }
  }

  for (let word in words) {
    if (resultStrings[word] === undefined) {
      resultStrings[word] = {
        translation: words[word],
        yes: 0,
        no: 0,
        kvp: {}
      }
    }

    let regexTranslationString

    if (words[word].endsWith('的')) {
      regexTranslationString =
        words[word] + '|' + words[word].substr(0, words[word].length - 1)
    } else {
      regexTranslationString = words[word]
    }

    const regexWord = new RegExp(word, 'i')
    const regexExclude = new RegExp(` ${word} |^${word} `, 'i')
    const regexTranslation = new RegExp(regexTranslationString, 'i')

    for (let str in translationsData) {
      if (regexWord.test(str)) {
        if (regexTranslation.test(translationsData[str])) {
          resultStrings[word].yes++
        } else if (regexExclude.test(str)) {
          resultStrings[word].no++
          resultStrings[word].kvp[str] = translationsData[str]
        }
      }
    }
  }

  for (let key in resultStrings) {
    if (resultStrings[key].no === 0) {
      delete resultStrings[key]
    }
  }

  return resultStrings
}

function getUnitItems() {
  const allStrings = getAllStrings()
  const resultStrings = {
    type1: {},
    type2: {
      empty: {},
      has_one: {},
      no_one: {}
    }
  }

  const regexType1 = /%[sd] \w+\(s\)/i
  const regexType2 = /a \w+/i

  for (let str in allStrings) {
    if (regexType1.test(str)) {
      resultStrings['type1'][str] = translationsData[str]
    }

    if (regexType2.test(str)) {
      const translation = translationsData[str]

      if (translation) {
        if (translation.indexOf('一') !== -1) {
          resultStrings['type2']['no_one'][str] = translation
        } else {
          resultStrings['type2']['has_one'][str] = translation
        }
      } else {
        resultStrings['type2']['empty'][str] = ''
      }
    }
  }

  return resultStrings
}
